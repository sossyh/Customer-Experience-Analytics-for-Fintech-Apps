# src/oracle_db_utils.py

import cx_Oracle
import pandas as pd

def connect_to_oracle(user, password, dsn):
    """Establish connection to Oracle DB."""
    try:
        connection = cx_Oracle.connect(user=user, password=password, dsn=dsn)
        print("✅ Oracle connection successful.")
        return connection
    except cx_Oracle.Error as e:
        print("❌ Oracle connection failed:", e)
        raise

def create_tables(conn):
    """Create Banks and Reviews tables."""
    cursor = conn.cursor()

    # Create Banks table
    cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE 'DROP TABLE Reviews';
        EXCEPTION
            WHEN OTHERS THEN NULL;
        END;
    """)
    cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE 'DROP TABLE Banks';
        EXCEPTION
            WHEN OTHERS THEN NULL;
        END;
    """)
    
    cursor.execute("""
        CREATE TABLE Banks (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name VARCHAR2(255) UNIQUE NOT NULL
        )
    """)

    cursor.execute("""
        CREATE TABLE Reviews (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            bank_id NUMBER REFERENCES Banks(id),
            review_text CLOB,
            cleaned_review CLOB,
            sentiment_label VARCHAR2(20),
            sentiment_score NUMBER,
            keywords CLOB,
            theme CLOB
        )
    """)

    conn.commit()
    print("✅ Tables created successfully.")

def insert_data(conn, df):
    """Insert cleaned reviews into Oracle DB."""
    cursor = conn.cursor()

    bank_ids = {}

    for _, row in df.iterrows():
        bank_name = row.get("bank", "Unknown Bank")

        # Insert bank if not already in DB
        if bank_name not in bank_ids:
            cursor.execute("SELECT id FROM Banks WHERE name = :1", [bank_name])
            result = cursor.fetchone()
            if result:
                bank_id = result[0]
            else:
                cursor.execute("INSERT INTO Banks (name) VALUES (:1) RETURNING id INTO :2", [bank_name, cursor.var(cx_Oracle.NUMBER)])
                bank_id = cursor.getimplicitresults()[0][0]
            bank_ids[bank_name] = bank_id

        # Insert review
        cursor.execute("""
            INSERT INTO Reviews (
                bank_id, review_text, cleaned_review, sentiment_label,
                sentiment_score, keywords, theme
            ) VALUES (
                :1, :2, :3, :4, :5, :6, :7
            )
        """, [
            bank_ids[bank_name],
            row["review"],
            row["cleaned_review"],
            row.get("sentiment_label", ""),
            row.get("sentiment_score", 0.0),
            ", ".join(row["keywords"]) if isinstance(row["keywords"], list) else "",
            ", ".join(row["theme"]) if isinstance(row["theme"], list) else "",
        ])

    conn.commit()
    print(f"✅ Inserted {len(df)} reviews successfully.")
